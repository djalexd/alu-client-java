/**
 * Test custom security definition
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package com.payu.gecad.alu;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.module.jaxb.JaxbAnnotationIntrospector;
import com.payu.gecad.ApiException;
import com.payu.gecad.alu_model.AluRequest;
import com.payu.gecad.alu_model.AluResponse;
import com.payu.gecad.alu_model.Merchant;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.conn.ssl.TrustSelfSignedStrategy;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.HttpClients;
import org.junit.Test;

import java.net.URI;

/**
 * API tests for DefaultApi
 */
public class AluApiTest {

    private final AluApi api = buildApi();
    private static AluApi buildApi() throws RuntimeException {
        try {
            final ObjectMapper mapper = new ObjectMapper();
            mapper.setAnnotationIntrospector(new JaxbAnnotationIntrospector());
            final CloseableHttpClient client = HttpClientBuilder.create()
                .setSSLSocketFactory(new SSLSocketFactory(new TrustSelfSignedStrategy()))
                .build();

            return new AluApi(
                client,
                URI.create("https://sandbox11ru.epayment.ro/order/alu/v3"),
                mapper);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void createOrderTest() {
        // given
        final AluRequest q = new AluRequest()
            .merchant(new Merchant().key("WALLET_N").secretKey("SECRET_KEY"));
        // when
        final AluResponse resp = api.createOrder(q);
        // then
        System.out.println(resp);
    }
}
